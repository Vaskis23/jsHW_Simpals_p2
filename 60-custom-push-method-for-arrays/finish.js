/** ЗАДАЧА 60 - Модифицированный метод push для массивов
 *
 * 1. Создайте новый класс "CustomArray", который должен расширять встроенный "Array"
 *
 * 2. Добавьте один пользовательский метод "customPush" в новый класс.
 * Этот метод будет иметь один параметр "newElement".
 *
 * При вызове этого метода необходимо выполнить следующие действия:
 *  - Добавить новый элемент в существующий массив
 *  (не используйте для этого метод "push")
 *  - Изменить свойство "length" массива (увеличить его на 1)
 *  - Вывести в консоль следующую строку:
 * "Новый элемент <newElement> был только что добавлен в массив"
 *
 * 3. Создайте экземпляр нового класса "CustomArray"
 * и протестируйте новый метод "customPush" и сравните его с "push"
 *
 * 4. Что произойдет, если имя пользовательского метода
 * в классе "CustomArray" также будет "push" вместо "customPush"?
 * Попробуйте это.
 */

class CustomArray extends Array {
    customPush(newElement) {
        console.log(this.length)
        this[this.length] = newElement
        console.log(this.length)
        console.log(`Новый элемент ${newElement} был только что добавлен в массив`)
    }
}

const myCustomArray = new CustomArray(90, 2, 6, 4)
myCustomArray.customPush(25)
console.log(myCustomArray)
myCustomArray.push(30)
console.log(myCustomArray)

/**
 * Создаем новый класс CustomArray, который расширяет встроенный класс Array. 
 * с помощью ключевого слова extends.
 * В классе CustomArray добавляется пользовательский метод customPush, который принимает один параметр newElement.
 * При вызове метода customPush новый элемент newElement добавляется в существующий массив this путем присваивания его по индексу this.length.
 * Свойство length массива увеличивается на 1.
 * Выводится строка в консоль, содержащая информацию о добавленном элементе.
 * Создается экземпляр класса CustomArray с начальными элементами 10, 3, 7, 5.
 * Метод customPush вызывается, передавая в качестве аргумента 25.
 */